import StatMech.ThermoQuantities

noncomputable section

--! Specializing to an ideal gas of distinguishable particles.

/-- The Hamiltonian for an ideal gas: particles live in a cube of volume V^(1/3), and each contributes an energy p^2/2.
The per-particle mass is normalized to 1. -/
def IdealGas : NVEHamiltonian where
  --The dimension of the manifold is 6 times the number of particles: three for position, three for momentum.
  dim := fun (n,_) ‚Ü¶ Fin n √ó (Fin 3 ‚äï Fin 3)
  --The energy is ‚àû if any positions are outside the cube, otherwise it's the sum of the momenta squared over 2.
  H := fun {d} config ‚Ü¶
    let (n,V) := d
    let R := V^(1/3:‚Ñù) / 2 --half-sidelength of a cubical box
    if ‚àÄ (i : Fin n) (ax : Fin 3), |config (i,.inl ax)| <= R then
      ‚àë (i : Fin n) (ax : Fin 3), config (i,.inr ax)^2 / (2 : ‚Ñù)
    else
      ‚ä§

namespace IdealGas
open MicroHamiltonian
open NVEHamiltonian

variable (n : ‚Ñï) {V Œ≤ T : ‚Ñù}

open MeasureTheory in
/-- The partition function Z for an ideal gas. -/
theorem PartitionZ_eq (hV : 0 < V) (hŒ≤ : 0 < Œ≤) :
    IdealGas.PartitionZ (n,V) Œ≤ = V^n * (2 * Real.pi / Œ≤)^(3 * n / 2 : ‚Ñù) := by
  rw [PartitionZ, IdealGas]
  simp only [Finset.univ_product_univ, one_div, ite_eq_right_iff, WithTop.sum_eq_top,
    Finset.mem_univ, WithTop.coe_ne_top, and_false, exists_false, imp_false, not_forall, not_le,
    neg_mul]
  have h‚ÇÄ : ‚àÄ (config:Fin n √ó (Fin 3 ‚äï Fin 3) ‚Üí ‚Ñù) proof,
      ((if ‚àÄ (i : Fin n) (ax : Fin 3), |config (i, Sum.inl ax)| ‚â§ V ^ (3 : ‚Ñù)‚Åª¬π / 2 then
                  ‚àë x : Fin n √ó Fin 3, config (x.1, Sum.inr x.2) ^ 2 / (2 :‚Ñù)
                else ‚ä§) : WithTop ‚Ñù).untop proof = ‚àë x : Fin n √ó Fin 3, config (x.1, Sum.inr x.2) ^ 2 / (2 :‚Ñù) := by
    intro config proof
    rw [WithTop.untop_eq_iff]
    split_ifs with h
    ¬∑ simp
    ¬∑ simp [h] at proof
  simp only [h‚ÇÄ, dite_eq_ite]; clear h‚ÇÄ

  let eq_pm : MeasurableEquiv ((Fin n √ó Fin 3 ‚Üí ‚Ñù) √ó (Fin n √ó Fin 3 ‚Üí ‚Ñù)) (Fin n √ó (Fin 3 ‚äï Fin 3) ‚Üí ‚Ñù) :=
    let e1 := (MeasurableEquiv.sumPiEquivProdPi (Œ± := fun (_ : (Fin n √ó Fin 3) ‚äï (Fin n √ó Fin 3)) ‚Ü¶ ‚Ñù))
    let e2 := (MeasurableEquiv.piCongrLeft _ (MeasurableEquiv.prodSumDistrib (Fin n) (Fin 3) (Fin 3))).symm
    e1.symm.trans e2

  have h_preserve : MeasurePreserving eq_pm := by
    unfold eq_pm
    -- fun_prop --this *should* be a fun_prop!
    rw [MeasurableEquiv.coe_trans]
    apply MeasureTheory.MeasurePreserving.comp (Œºb := by volume_tac)
    ¬∑ apply MeasurePreserving.symm
      apply MeasureTheory.volume_measurePreserving_piCongrLeft
    ¬∑ apply MeasurePreserving.symm
      apply measurePreserving_sumPiEquivProdPi
  rw [‚Üê MeasurePreserving.integral_comp h_preserve eq_pm.measurableEmbedding]; clear h_preserve

  rw [show volume = Measure.prod volume volume from rfl]
  rw [integral_prod]

  have h_eval_eq_pm : ‚àÄ (x y i p_i), eq_pm (x, y) (i, Sum.inl p_i) = x (i, p_i) := by
    intros; rfl
  have h_eval_eq_pm' : ‚àÄ (x y i m_i), eq_pm (x, y) (i, Sum.inr m_i) = y (i, m_i) := by
    intros; rfl
  simp_rw [h_eval_eq_pm, h_eval_eq_pm']
  clear h_eval_eq_pm h_eval_eq_pm'

  simp_rw [‚Üê ite_not _ _ (0:‚Ñù), ‚Üê boole_mul _ (Real.exp _)]
  simp_rw [MeasureTheory.integral_mul_left, MeasureTheory.integral_mul_right]
  congr 1
  ¬∑ --Volume of the box
    have h_integrand_prod : ‚àÄ (a : Fin n √ó Fin 3 ‚Üí ‚Ñù),
        (if ¬¨‚àÉ x y, V ^ (3‚Åª¬π : ‚Ñù) / 2 < |a (x, y)| then 1 else 0) =
        (‚àè xy, if |a xy| ‚â§ V ^ (3‚Åª¬π : ‚Ñù) / 2 then 1 else 0 : ‚Ñù) := by
      intro a
      push_neg
      simp_rw [‚Üê Prod.forall (p := fun xy ‚Ü¶ |a xy| ‚â§ V ^ (3‚Åª¬π : ‚Ñù) / 2)]
      exact Fintype.prod_boole.symm
    simp_rw [h_integrand_prod]; clear h_integrand_prod
    rw [MeasureTheory.integral_fintype_prod_eq_prod (ùïú := ‚Ñù)
      (f := fun _ r ‚Ü¶ if |r| ‚â§ V ^ (3‚Åª¬π : ‚Ñù) / 2 then 1 else 0)]
    rw [Finset.prod_const]
    rw [Finset.card_univ, Fintype.card_prod, Fintype.card_fin, Fintype.card_fin]
    have h_integral_1d : (‚à´ (x : ‚Ñù), if |x| ‚â§ V ^ (3‚Åª¬π : ‚Ñù) / 2 then 1 else 0) = V ^ (3‚Åª¬π : ‚Ñù) := by
      have h_indicator := integral_indicator (f := fun _ ‚Ü¶ (1:‚Ñù)) (Œº := by volume_tac)
        (measurableSet_Icc (a := -(V ^ (3‚Åª¬π : ‚Ñù) / 2)) (b := (V ^ (3‚Åª¬π : ‚Ñù) / 2)))
      simp_rw [Set.indicator] at h_indicator
      simp_rw [abs_le, ‚Üê Set.mem_Icc, h_indicator]
      simp
      positivity
    rw [h_integral_1d]; clear h_integral_1d
    rw [‚Üê Real.rpow_mul_natCast]
    field_simp
    exact hV.le
  ¬∑ --Gaussian integral
    have h_gaussian :=
      GaussianFourier.integral_rexp_neg_mul_sq_norm (V := PiLp 2 (fun (_ : Fin n √ó Fin 3) ‚Ü¶ ‚Ñù)) (half_pos hŒ≤)
    apply (Eq.trans ?_ h_gaussian).trans ?_
    ¬∑ congr
      ¬∑ simp [measureSpaceOfInnerProductSpace, MeasureSpace.pi, PiLp, WithLp]
        apply congrArg
        sorry --Some MeasureTheory mess
      ¬∑ funext x
        simp_rw [div_eq_inv_mul, ‚Üê Finset.mul_sum, ‚Üê mul_assoc, neg_mul, mul_comm, PiLp.norm_sq_eq_of_L2]
        simp
    ¬∑ field_simp
      ring_nf
  sorry --Show integrability?

/-- The Helmholtz Free Energy A for an ideal gas. -/
theorem HelmholtzA_eq (hV : 0 < V) (hT : 0 < T) : IdealGas.HelmholtzA (n,V) T =
    -n * T * (Real.log V + (3/2) * Real.log (2 * Real.pi * T)) := by
  rw [HelmholtzA, PartitionZT, PartitionZ_eq n hV (one_div_pos.mpr hT), Real.log_mul,
    Real.log_pow, Real.log_rpow, one_div, div_inv_eq_mul]
  ring_nf
  all_goals positivity

theorem ZIntegrable (hV : 0 < V) (hŒ≤ : 0 < Œ≤) : IdealGas.ZIntegrable (n,V) Œ≤ := by
  have hZpos : 0 < PartitionZ IdealGas (n, V) Œ≤ := by
    rw [PartitionZ_eq n hV hŒ≤]
    positivity
  constructor
  ¬∑ apply MeasureTheory.Integrable.of_integral_ne_zero
    rw [‚Üê PartitionZ]
    exact hZpos.ne'
  ¬∑ exact hZpos.ne'

/-- The ideal gas law: PV = nRT. In our unitsless system, R = 1.-/
theorem IdealGasLaw (hV : 0 < V) (hT : 0 < T) :
    let P := IdealGas.Pressure (n,V) T;
    let R := 1;
    P * V = n * R * T := by
  dsimp [Pressure]
  rw [‚Üê derivWithin_of_isOpen (s := Set.Ioi 0) isOpen_Ioi hV]
  rw [derivWithin_congr (f := fun V' ‚Ü¶ -n * T * (Real.log V' + (3/2) * Real.log (2 * Real.pi * T))) ?_ ?_]
  rw [derivWithin_of_isOpen (s := Set.Ioi 0) isOpen_Ioi hV]
  rw [deriv_mul (by fun_prop) (by fun_prop (disch := exact hV.ne'))]
  field_simp
  ring_nf
  ¬∑ exact fun _ hV' ‚Ü¶ HelmholtzA_eq n hV' hT
  ¬∑ exact HelmholtzA_eq n hV hT

-- Now proving e.g. Boyle's Law ("for an ideal gas with a fixed particle number, P and V are inversely proportional")
-- is a trivial consequence of the ideal gas law.

end IdealGas
